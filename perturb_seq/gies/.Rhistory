k2 = 0
k3 = 0
ges.alg <- function(data, targets, k1, k2, k3){
#set up the scoring function
tidx <- unlist(lapply(1:length(targets), function(t) rep(t, nrow(data[[t]]))))
data <- do.call(rbind, data)
l0score <- new("GaussL0penIntScore", data = data, targets=targets, target.index=tidx, intercept = FALSE, use.cpp = TRUE)
p <- ncol(data)
#estimate essential graph
essgraph <- new("EssGraph", nodes=sapply(1:p, toString), targets=targets, score=l0score)
#start the forward phase
essgraph$caus.inf(algorithm="GIES-F", maxSteps=k1)
#start the backward phase
essgraph$caus.inf(algorithm="GIES-B", maxSteps=k2)
#start the turning phase
essgraph$caus.inf(algorithm="GIES-T", maxSteps=k3)
return(as(essgraph, "graphNEL"))
}
essgraph <- ges.alg(data.list, t.list, k1, k2, k3)
essgraph@edgeL
library(pcalg)
library(graph)
set.seed(1)
load("./data/Cebpb__excluded_data.rda")
k1 = 0
k2 = 0
k3 = 0
rm(list=ls())
library(pcalg)
library(graph)
set.seed(1)
load("./data/Cebpb__excluded_data.rda")
k1 = 0
k2 = 0
k3 = 0
ges.alg <- function(data, targets, k1, k2, k3){
#set up the scoring function
tidx <- unlist(lapply(1:length(targets), function(t) rep(t, nrow(data[[t]]))))
data <- do.call(rbind, data)
l0score <- new("GaussL0penIntScore", data = data, targets=targets, target.index=tidx, intercept = FALSE, use.cpp = TRUE)
p <- ncol(data)
#estimate essential graph
essgraph <- new("EssGraph", nodes=sapply(1:p, toString), targets=targets, score=l0score)
#start the forward phase
essgraph$caus.inf(algorithm="GIES-F", maxSteps=k1)
#start the backward phase
essgraph$caus.inf(algorithm="GIES-B", maxSteps=k2)
#start the turning phase
essgraph$caus.inf(algorithm="GIES-T", maxSteps=k3)
return(essgraph)
}
essgraph <- ges.alg(data.list, t.list, k1, k2, k3)
matrix(0,19,19)
in_edges = essgraph$.in.edges
grspdag = matrix(0, 24, 24)
idx = 1;
for (i in in_edges){
for (j in i){
grspdag[j, idx] = DAG[j, idx] + 1
}
idx = idx+1
}
idx = 1;
for (i in in_edges){
for (j in i){
grspdag[j, idx] = grspdag[j, idx] + 1
}
idx = idx+1
}
View(grspdag)
plot(essgraph)
biocLite("Rgraphviz")
source("https://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
plot(essgraph)
View(grspdag)
View(grspdag)
essgraph = as(essgraph, 'graphNEL')
getwd()
rm(list=ls())
true_descendents = read.table('log_pvals', header = F)
perturbations = read.csv('perturbations', stringsAsFactors = F, header = F)
perturbations = perturbations$V1
colnames(true_descendents) = perturbations
true_descendents = abs(true_descendents)
# delete control column
true_descendents = true_descendents[c(1,3:9)]
perturbations = perturbations[c(1,3:9)]
gene_names = read.csv('genes', stringsAsFactors = F, header = F)
gene_names = gene_names$V1
files = list.files(path = './result/')
#GIES
#DAG_list = lapply(files, function(file) read.table(file, header = T))
#Greedy sp
DAG_list = list()
for (file in files) {
load(file)
#DAG_list[[length(DAG_list)+1]] = grspdag[gene_names %in% perturbations,gene_names %in% perturbations]
DAG_list[[length(DAG_list)+1]] = grspdag
}
DAG_names = files
#true_descendents = true_descendents[gene_names %in% perturbations,]
#gene_names = gene_names[gene_names %in% perturbations]
#,
for (sig in c(0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150)){
predicted_children = true_descendents
#added for skeleton
#predicted_children_skeleton = true_descendents
# for each perturbation, find DAG name with same perturbation, get children
for (i in 1:length(perturbations)) {
perturb = perturbations[i]
print(perturb)
dag_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste(perturb, '', sep = '_'), x))))
sig_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste('', sig, '', sep = '_'), x))))
dag_idx = intersect(dag_idx, sig_idx)
print(dag_idx)
predicted_children[,i] = get_children(DAG_list[[dag_idx]], which(gene_names == perturb))
# added for skeleton
#predicted_children_skeleton[,i] = get_children_skeleton(DAG_list[[dag_idx]], which(gene_names == perturb))
}
# changed for skeleton
true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children)))
#true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children_skeleton)))
false_positives = unlist(lapply(1:50/10, function(t) get_fp(true_descendents, t, predicted_children)))
results = data.frame(1, true_positives, false_positives)
save(results, file=paste('./accuracy_results', paste(sig,'gies_accuracy_results.rda', sep = '_'), sep = ''))
}
get_children <-function(DAG, int_node) {
DAG = t(DAG)
ans = (DAG[,int_node] == 1)+0
names(ans) = NULL
return(ans)
}
get_children_skeleton <- function(DAG, int_node){
DAG = t(DAG)
ans = ((DAG[,int_node] == 1) | (DAG[int_node,] == 1))+0
names(ans) = NULL
return(ans)
}
# determine true positives, false positives, for given p-val cutoff, DAG, and interventional set
get_tp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
true_positives = (predicted_children == 1) & (true_descendents == 1)
return (sum(true_positives))
}
get_fp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
false_positives = (predicted_children == 1) & (true_descendents == 0)
return (sum(false_positives))
}
rm(list=ls())
true_descendents = read.table('log_pvals', header = F)
perturbations = read.csv('perturbations', stringsAsFactors = F, header = F)
perturbations = perturbations$V1
colnames(true_descendents) = perturbations
true_descendents = abs(true_descendents)
# delete control column
true_descendents = true_descendents[c(1,3:9)]
perturbations = perturbations[c(1,3:9)]
gene_names = read.csv('genes', stringsAsFactors = F, header = F)
gene_names = gene_names$V1
files = list.files(path = './result/')
#GIES
#DAG_list = lapply(files, function(file) read.table(file, header = T))
#Greedy sp
DAG_list = list()
for (file in files) {
load(file)
#DAG_list[[length(DAG_list)+1]] = grspdag[gene_names %in% perturbations,gene_names %in% perturbations]
DAG_list[[length(DAG_list)+1]] = grspdag
}
DAG_names = files
get_children <-function(DAG, int_node) {
DAG = t(DAG)
ans = (DAG[,int_node] == 1)+0
names(ans) = NULL
return(ans)
}
get_children_skeleton <- function(DAG, int_node){
DAG = t(DAG)
ans = ((DAG[,int_node] == 1) | (DAG[int_node,] == 1))+0
names(ans) = NULL
return(ans)
}
# determine true positives, false positives, for given p-val cutoff, DAG, and interventional set
get_tp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
true_positives = (predicted_children == 1) & (true_descendents == 1)
return (sum(true_positives))
}
get_fp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
false_positives = (predicted_children == 1) & (true_descendents == 0)
return (sum(false_positives))
}
#true_descendents = true_descendents[gene_names %in% perturbations,]
#gene_names = gene_names[gene_names %in% perturbations]
#,
for (sig in c(0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150)){
predicted_children = true_descendents
#added for skeleton
#predicted_children_skeleton = true_descendents
# for each perturbation, find DAG name with same perturbation, get children
for (i in 1:length(perturbations)) {
perturb = perturbations[i]
print(perturb)
dag_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste(perturb, '', sep = '_'), x))))
sig_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste('', sig, '', sep = '_'), x))))
dag_idx = intersect(dag_idx, sig_idx)
print(dag_idx)
predicted_children[,i] = get_children(DAG_list[[dag_idx]], which(gene_names == perturb))
# added for skeleton
#predicted_children_skeleton[,i] = get_children_skeleton(DAG_list[[dag_idx]], which(gene_names == perturb))
}
# changed for skeleton
true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children)))
#true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children_skeleton)))
false_positives = unlist(lapply(1:50/10, function(t) get_fp(true_descendents, t, predicted_children)))
results = data.frame(1, true_positives, false_positives)
save(results, file=paste('./accuracy_results', paste(sig,'gies_accuracy_results.rda', sep = '_'), sep = ''))
}
load(file)
rm(list=ls())
true_descendents = read.table('log_pvals', header = F)
perturbations = read.csv('perturbations', stringsAsFactors = F, header = F)
perturbations = perturbations$V1
colnames(true_descendents) = perturbations
true_descendents = abs(true_descendents)
# delete control column
true_descendents = true_descendents[c(1,3:9)]
perturbations = perturbations[c(1,3:9)]
gene_names = read.csv('genes', stringsAsFactors = F, header = F)
gene_names = gene_names$V1
files = list.files(path = './result/')
#GIES
#DAG_list = lapply(files, function(file) read.table(file, header = T))
#Greedy sp
DAG_list = list()
for (file in files) {
load(paste('./result/', file, sep = ''))
#DAG_list[[length(DAG_list)+1]] = grspdag[gene_names %in% perturbations,gene_names %in% perturbations]
DAG_list[[length(DAG_list)+1]] = grspdag
}
DAG_names = files
get_children <-function(DAG, int_node) {
DAG = t(DAG)
ans = (DAG[,int_node] == 1)+0
names(ans) = NULL
return(ans)
}
get_children_skeleton <- function(DAG, int_node){
DAG = t(DAG)
ans = ((DAG[,int_node] == 1) | (DAG[int_node,] == 1))+0
names(ans) = NULL
return(ans)
}
# determine true positives, false positives, for given p-val cutoff, DAG, and interventional set
get_tp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
true_positives = (predicted_children == 1) & (true_descendents == 1)
return (sum(true_positives))
}
get_fp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
false_positives = (predicted_children == 1) & (true_descendents == 0)
return (sum(false_positives))
}
#true_descendents = true_descendents[gene_names %in% perturbations,]
#gene_names = gene_names[gene_names %in% perturbations]
#,
for (sig in c(0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150)){
predicted_children = true_descendents
#added for skeleton
#predicted_children_skeleton = true_descendents
# for each perturbation, find DAG name with same perturbation, get children
for (i in 1:length(perturbations)) {
perturb = perturbations[i]
print(perturb)
dag_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste(perturb, '', sep = '_'), x))))
sig_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste('', sig, '', sep = '_'), x))))
dag_idx = intersect(dag_idx, sig_idx)
print(dag_idx)
predicted_children[,i] = get_children(DAG_list[[dag_idx]], which(gene_names == perturb))
# added for skeleton
#predicted_children_skeleton[,i] = get_children_skeleton(DAG_list[[dag_idx]], which(gene_names == perturb))
}
# changed for skeleton
true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children)))
#true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children_skeleton)))
false_positives = unlist(lapply(1:50/10, function(t) get_fp(true_descendents, t, predicted_children)))
results = data.frame(1, true_positives, false_positives)
save(results, file=paste('./accuracy_results', paste(sig,'gies_accuracy_results.rda', sep = '_'), sep = ''))
}
rm(list=ls())
true_descendents = read.table('log_pvals', header = F)
perturbations = read.csv('perturbations', stringsAsFactors = F, header = F)
perturbations = perturbations$V1
colnames(true_descendents) = perturbations
true_descendents = abs(true_descendents)
# delete control column
true_descendents = true_descendents[c(1,3:9)]
perturbations = perturbations[c(1,3:9)]
gene_names = read.csv('genes', stringsAsFactors = F, header = F)
gene_names = gene_names$V1
files = list.files(path = './result/')
#GIES
#DAG_list = lapply(files, function(file) read.table(file, header = T))
#Greedy sp
DAG_list = list()
for (file in files) {
load(paste('./result/', file, sep = ''))
#DAG_list[[length(DAG_list)+1]] = grspdag[gene_names %in% perturbations,gene_names %in% perturbations]
DAG_list[[length(DAG_list)+1]] = grspdag
}
DAG_names = files
get_children <-function(DAG, int_node) {
DAG = t(DAG)
ans = (DAG[,int_node] == 1)+0
names(ans) = NULL
return(ans)
}
get_children_skeleton <- function(DAG, int_node){
DAG = t(DAG)
ans = ((DAG[,int_node] == 1) | (DAG[int_node,] == 1))+0
names(ans) = NULL
return(ans)
}
# determine true positives, false positives, for given p-val cutoff, DAG, and interventional set
get_tp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
true_positives = (predicted_children == 1) & (true_descendents == 1)
return (sum(true_positives))
}
get_fp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
false_positives = (predicted_children == 1) & (true_descendents == 0)
return (sum(false_positives))
}
#true_descendents = true_descendents[gene_names %in% perturbations,]
#gene_names = gene_names[gene_names %in% perturbations]
#,
for (sig in c(0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150)){
predicted_children = true_descendents
#added for skeleton
#predicted_children_skeleton = true_descendents
# for each perturbation, find DAG name with same perturbation, get children
for (i in 1:length(perturbations)) {
perturb = perturbations[i]
print(perturb)
dag_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste(perturb, '', sep = '_'), x))))
sig_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste('', sig, '', sep = '_'), x))))
dag_idx = intersect(dag_idx, sig_idx)
print(dag_idx)
predicted_children[,i] = get_children(DAG_list[[dag_idx]], which(gene_names == perturb))
# added for skeleton
#predicted_children_skeleton[,i] = get_children_skeleton(DAG_list[[dag_idx]], which(gene_names == perturb))
}
# changed for skeleton
true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children)))
#true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children_skeleton)))
false_positives = unlist(lapply(1:50/10, function(t) get_fp(true_descendents, t, predicted_children)))
results = data.frame(1, true_positives, false_positives)
save(results, file=paste('./accuracy_results/', paste(sig,'gies_accuracy_results.rda', sep = '_'), sep = ''))
}
files = list.files('./accuracy_results')
greedy_sp_pvals = as.numeric(gsub("_gies_accuracy_results\\.rda", "", files))
sorted = sort.int(greedy_sp_pvals, index.return = T)
greedy_sp_pvals = sorted$x
sorting_idx = sorted$ix
# reorder files
files = files[sorting_idx]
true_positives = list()
for (file in files) {
load(file)
true_positives[[length(true_positives)+1]] = results$true_positives
}
true_positives = do.call(cbind, true_positives)
rownames(true_positives) = 1:50/10
colnames(true_positives) = greedy_sp_pvals
false_positives = list()
for (file in files) {
load(file)
false_positives[[length(false_positives)+1]] = results$false_positives
}
false_positives = do.call(cbind, false_positives)
rownames(false_positives) = 1:50/10
colnames(false_positives) = greedy_sp_pvals
load('proportion_true.rda')
save(proportion_true, true_positives, false_positives, file = 'gies_summary.rda')
files = list.files('./accuracy_results')
greedy_sp_pvals = as.numeric(gsub("_gies_accuracy_results\\.rda", "", files))
sorted = sort.int(greedy_sp_pvals, index.return = T)
greedy_sp_pvals = sorted$x
sorting_idx = sorted$ix
# reorder files
files = files[sorting_idx]
true_positives = list()
for (file in files) {
load(file)
true_positives[[length(true_positives)+1]] = results$true_positives
}
true_positives = do.call(cbind, true_positives)
rownames(true_positives) = 1:50/10
colnames(true_positives) = greedy_sp_pvals
false_positives = list()
for (file in files) {
load(paste('./accuracy_results', file, sep = ''))
false_positives[[length(false_positives)+1]] = results$false_positives
}
false_positives = do.call(cbind, false_positives)
rownames(false_positives) = 1:50/10
colnames(false_positives) = greedy_sp_pvals
load('proportion_true.rda')
save(proportion_true, true_positives, false_positives, file = 'gies_summary.rda')
files = list.files('./accuracy_results')
greedy_sp_pvals = as.numeric(gsub("_gies_accuracy_results\\.rda", "", files))
sorted = sort.int(greedy_sp_pvals, index.return = T)
greedy_sp_pvals = sorted$x
sorting_idx = sorted$ix
# reorder files
files = files[sorting_idx]
true_positives = list()
for (file in files) {
load(paste('./accuracy_results', file, sep = ''))
true_positives[[length(true_positives)+1]] = results$true_positives
}
true_positives = do.call(cbind, true_positives)
rownames(true_positives) = 1:50/10
colnames(true_positives) = greedy_sp_pvals
false_positives = list()
for (file in files) {
load(paste('./accuracy_results', file, sep = ''))
false_positives[[length(false_positives)+1]] = results$false_positives
}
false_positives = do.call(cbind, false_positives)
rownames(false_positives) = 1:50/10
colnames(false_positives) = greedy_sp_pvals
load('proportion_true.rda')
save(proportion_true, true_positives, false_positives, file = 'gies_summary.rda')
rm(list=ls())
true_descendents = read.table('log_pvals', header = F)
perturbations = read.csv('perturbations', stringsAsFactors = F, header = F)
perturbations = perturbations$V1
colnames(true_descendents) = perturbations
true_descendents = abs(true_descendents)
# delete control column
true_descendents = true_descendents[c(1,3:9)]
perturbations = perturbations[c(1,3:9)]
gene_names = read.csv('genes', stringsAsFactors = F, header = F)
gene_names = gene_names$V1
files = list.files('./result')
#Greedy sp
DAG_list = list()
DAG_names = c()
for (file in files) {
load(paste('./result/', file, sep = ''))
for (i in c(1:length(alphas))){
DAG_list[[length(DAG_list)+1]] = as(grspdag.list[[i]], "matrix")
DAG_names[length(DAG_names)+1] = paste(file,alphas[i],sep="_")
}
}
get_children <-function(DAG, int_node) {
DAG = t(DAG)
ans = (DAG[,int_node] == 1)+0
names(ans) = NULL
return(ans)
}
get_children_skeleton <- function(DAG, int_node){
DAG = t(DAG)
ans = ((DAG[,int_node] == 1) | (DAG[int_node,] == 1))+0
names(ans) = NULL
return(ans)
}
# determine true positives, false positives, for given p-val cutoff, DAG, and interventional set
get_tp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
true_positives = (predicted_children == 1) & (true_descendents == 1)
return (sum(true_positives))
}
get_fp <- function(true_descendents, p_threshold, predicted_children){
true_descendents = true_descendents>p_threshold
false_positives = (predicted_children == 1) & (true_descendents == 0)
return (sum(false_positives))
}
#,
for (sig in alphas){
print(sig)
predicted_children = true_descendents
#added for skeleton
#predicted_children_skeleton = true_descendents
# for each perturbation, find DAG name with same perturbation, get children
for (i in 1:length(perturbations)) {
perturb = perturbations[i]
print(perturb)
dag_idx = which(unlist(lapply(DAG_names, function(x) grepl(paste(perturb, '', sep = '_'), x))))
sig_idx = which(unlist(lapply(DAG_names, function(x) grepl(gsub("\\.", "\\\\.", sig), x))))
dag_idx = intersect(dag_idx, sig_idx)
print(dag_idx)
predicted_children[,i] = get_children(DAG_list[[dag_idx]], which(gene_names == perturb))
# added for skeleton
#predicted_children_skeleton[,i] = get_children_skeleton(DAG_list[[dag_idx]], which(gene_names == perturb))
}
# changed for skeleton
true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children)))
#true_positives = unlist(lapply(1:50/10, function(t) get_tp(true_descendents, t, predicted_children_skeleton)))
false_positives = unlist(lapply(1:50/10, function(t) get_fp(true_descendents, t, predicted_children)))
results = data.frame(1, true_positives, false_positives)
save(results, file=paste('./accuracy_results/', paste(sig,'accuracy_results.rda', sep = '_'), sep = ''))
}
load(paste('./result/', file, sep = ''))
rm(list=ls())
getwd()
